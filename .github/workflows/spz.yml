name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: "1.90.0"

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ libzstd-dev

      - name: Set Up Rust Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: clippy
          cache: false
          rustflags: "-D warnings"

      - name: Cargo Check
        run: cargo check

  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ libzstd-dev

      - name: Set Up Rust Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: clippy
          cache: false
          rustflags: "-D warnings"

      - name: Cargo Test
        run: cargo test --all-features

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Rust Toolchain with Rustfmt
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt
          cache: false
          rustflags: "-D warnings"

      - name: Cargo Format Check
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ libzstd-dev

      - name: Set Up Rust Toolchain with Clippy
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: clippy
          cache: false
          rustflags: "-D warnings"

      - name: Cargo Clippy
        run: cargo clippy -- -D warnings

  build_release:
    name: Build Release (${{ matrix.lib_features }}) [${{ matrix.platform.os }}]
    runs-on: ${{ matrix.platform.os }}
    needs: [check, test, fmt, clippy]
    strategy:
      matrix:
        lib_features: ["none", "async", "bytes", "async,bytes"]
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: aarch64-apple-darwin
      fail-fast: false
    continue-on-error: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Rust Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.platform.target }}
          components: clippy
          cache: true
          rustflags: "-D warnings"

      - name: Install System Dependencies (Linux x86_64)
        if: matrix.platform.os == 'ubuntu-latest' && matrix.platform.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ libzstd-dev

      - name: Install System Dependencies (Linux aarch64)
        if: matrix.platform.os == 'ubuntu-24.04-arm' && matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ libzstd-dev

      - name: Install System Dependencies (macOS aarch64)
        if: matrix.platform.os == 'macos-latest' && matrix.platform.target == 'aarch64-apple-darwin'
        run: |
          brew update
          brew install gcc zstd

      - name: Install System Dependencies (Windows x86_64)
        if: matrix.platform.os == 'windows-latest' && matrix.platform.target == 'x86_64-pc-windows-msvc'
        shell: pwsh
        run: |
          choco install zstandard -y --version=1.5.6

      - name: Build Release
        env:
          LIB_FEATURES: ${{ matrix.lib_features }}
        shell: bash
        run: |
          set -euxo pipefail
          # Build spz-lib with selected features
          cd spz-lib
          if [ "$LIB_FEATURES" = "none" ]; then
            cargo build --release --no-default-features
          else
            cargo build --release --no-default-features --features "$LIB_FEATURES"
          fi
          cd ..
          # Build spz binary only when async is enabled (it depends on async)
          if echo "$LIB_FEATURES" | grep -q "async"; then
            cargo build --release --target ${{ matrix.platform.target }} --no-default-features --features "$LIB_FEATURES"
          else
            echo "Skipping spz binary build for feature set: $LIB_FEATURES (async not enabled)"
          fi